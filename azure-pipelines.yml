
trigger:
  branches:
    include:
      - main

variables:
  azureContainerRegistry: 'bestrong'
  azureResourceGroup: 'rg-bestrong'
  imageRepository: 'bestrong-api'
  tag: '$(Build.BuildId)'
  dockerRegistryServiceConnection: 'bestrong-acr'
  azureRmServiceConnection: 'azure-conn'

stages:
# Stage 1: Build & Push Docker Image to ACR
- stage: Build
  jobs:
  - job: BuildAndPush
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      submodules: true
      fetchDepth: 0
      persistCredentials: true
    - task: Docker@2
      displayName: 'Login to ACR'
      inputs:
        command: login
        containerRegistry: '$(dockerRegistryServiceConnection)'
    - task: Docker@2
      displayName: 'Build and Push Docker Image'
      inputs:
        containerRegistry: '$(dockerRegistryServiceConnection)'
        repository: '$(imageRepository)'
        command: buildAndPush
        dockerfile: '$(Build.SourcesDirectory)/Dockerfile'
        tags: |
          $(tag)
          latest

# Stage 2: Package & Push Helm Chart to ACR
- stage: Package
  displayName: 'Package Helm Chart'
  jobs:
  - job: PackageHelmChart
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      submodules: true
      fetchDepth: 0
      persistCredentials: true
    - task: HelmInstaller@1
      inputs:
        helmVersionToInstall: 'latest'
    - task: AzureCLI@2
      displayName: 'Push Helm Chart to ACR as OCI artifact'
      inputs:
        azureSubscription: '$(azureRmServiceConnection)'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          az acr login --name $(azureContainerRegistry)
          helm package $(Build.SourcesDirectory)/Helm \
            --version $(Build.BuildId) \
            --destination $(Build.ArtifactStagingDirectory)
          export HELM_EXPERIMENTAL_OCI=1
          CHART_PATH=$(Build.ArtifactStagingDirectory)/bestrong-api-$(Build.BuildId).tgz
          helm push $CHART_PATH oci://$(azureContainerRegistry).azurecr.io/helm

# Stage 3: Deploy to AKS
- stage: Deploy
  displayName: 'Deploy to AKS'
  dependsOn:
    - Build
    - Package
  jobs:
  - deployment: DeployToAKS
    pool:
      vmImage: 'ubuntu-latest'
    environment: 'production'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: HelmInstaller@1
            inputs:
              helmVersionToInstall: 'latest'
          - task: AzureCLI@2
            displayName: 'Get AKS Credentials and Deploy'
            inputs:
              azureSubscription: '$(azureRmServiceConnection)'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                # Get AKS credentials
                az aks get-credentials -n aks-bestrong -g $(azureResourceGroup)

                # Clean up existing ingress-nginx resources
                echo "Cleaning up existing ingress-nginx resources..."
                helm uninstall ingress-nginx --namespace ingress-nginx || true
                kubectl delete namespace ingress-nginx --ignore-not-found

                # Install ingress-nginx with LoadBalancer
                echo "Installing ingress-nginx with LoadBalancer..."
                helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
                helm repo update
                helm upgrade --install ingress-nginx ingress-nginx/ingress-nginx \
                  --version 4.11.1 \
                  --namespace ingress-nginx \
                  --create-namespace \
                  --set controller.service.type=LoadBalancer \
                  --set controller.service.externalTrafficPolicy=Local \
                  --set controller.progressDeadlineSeconds=600 \
                  --debug > helm-install.log 2>&1
                cat helm-install.log

                # Wait for ingress-nginx controller pods to be ready
                echo "Waiting for ingress-nginx controller to be ready..."
                kubectl wait --namespace ingress-nginx \
                  --for=condition=Ready pod \
                  --selector=app.kubernetes.io/component=controller \
                  --timeout=300s

                # Install cert-manager
                echo "Installing cert-manager..."
                helm repo add jetstack https://charts.jetstack.io
                helm repo update
                helm upgrade --install cert-manager jetstack/cert-manager \
                  --namespace cert-manager \
                  --create-namespace \
                  --set installCRDs=true \
                  --timeout=300s

                # Wait for cert-manager to be ready
                echo "Waiting for cert-manager to be ready..."
                kubectl wait --namespace cert-manager \
                  --for=condition=Ready pod \
                  --selector=app.kubernetes.io/name=cert-manager \
                  --timeout=180s

                # Apply letsencrypt-prod ClusterIssuer
                echo "Applying letsencrypt-prod ClusterIssuer..."
                kubectl apply -f $(Build.SourcesDirectory)/config/letsencrypt-clusterissuer.yaml

                # Wait for ClusterIssuer to be ready
                echo "Waiting for ClusterIssuer to be ready..."
                for i in {1..10}; do
                  STATUS=$(kubectl get clusterissuer letsencrypt-prod -o jsonpath='{.status.conditions[?(@.type=="Ready")].status}' 2>/dev/null || echo "")
                  if [ "$STATUS" = "True" ]; then
                    echo "ClusterIssuer is ready"
                    break
                  fi
                  echo "Waiting for ClusterIssuer... attempt $i/10"
                  sleep 10
                done

                # Log in to ACR
                echo "Logging in to ACR..."
                export HELM_EXPERIMENTAL_OCI=1
                az acr login --name $(azureContainerRegistry)

                # Pull Helm chart from ACR
                echo "Pulling Helm chart from ACR..."
                helm pull oci://$(azureContainerRegistry).azurecr.io/helm/bestrong-api --version $(Build.BuildId) --destination $(Agent.TempDirectory)

                # Deploy BeStrong API
                echo "Deploying BeStrong API with Helm..."
                helm upgrade --install bestrong-api $(Agent.TempDirectory)/bestrong-api-$(Build.BuildId).tgz \
                  --set image.repository=$(azureContainerRegistry).azurecr.io/$(imageRepository) \
                  --set image.tag=$(Build.BuildId) \
                  --set replicaCount=2 \
                  --set ingress.enabled=true \
                  --set ingress.hosts[0].host=kjk-s.xyz \
                  --set ingress.tls[0].hosts[0]=kjk-s.xyz \
                  --set ingress.tls[0].secretName=letsencrypt-prod-tls \
                  --set certificate.enabled=true \
                  --set certificate.name=letsencrypt-prod-tls \
                  --set certificate.issuer=letsencrypt-prod \
                  --set certificate.secretName=letsencrypt-prod-tls \
                  --set certificate.dnsNames[0]=kjk-s.xyz \
                  --set ingress.annotations.nginx\.ingress\.kubernetes\.io/ssl-redirect=true \
                  --set ingress.annotations.nginx\.ingress\.kubernetes\.io/force-ssl-redirect=true \
                  --namespace default \
                  --timeout=600s

                # Wait for certificate to be ready
                echo "Waiting for certificate to be ready..."
                for i in {1..10}; do
                  STATUS=$(kubectl get certificate letsencrypt-prod-tls -n default -o jsonpath='{.status.conditions[?(@.type=="Ready")].status}' 2>/dev/null || echo "")
                  if [ "$STATUS" = "True" ]; then
                    echo "Certificate is ready"
                    break
                  fi
                  echo "Waiting for certificate... attempt $i/10"
                  sleep 30
                done

                # Verify deployment
                echo "Verifying deployment..."
                kubectl get pods -n default
                kubectl get ingress -n default
                kubectl get certificate -n default
