variables:
  azureContainerRegistry: 'bestrong'
  azureResourceGroup: 'rg-bestrong'
  imageRepository: 'bestrong-api'
  tag: '$(Build.BuildId)'
  dockerRegistryServiceConnection: 'bestrong-acr'
  azureRmServiceConnection: 'azure-conn'

trigger:
  branches:
    include:
      - main 

stages:
# Stage 1: Build & Push Docker Image to ACR
- stage: Build
  jobs:
  - job: BuildAndPush
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      submodules: true
      fetchDepth: 0
      persistCredentials: true
    - task: Docker@2
      displayName: 'Login to ACR'
      inputs:
        command: login
        containerRegistry: '$(dockerRegistryServiceConnection)'
    - task: Docker@2
      displayName: 'Build and Push Docker Image'
      inputs:
        containerRegistry: '$(dockerRegistryServiceConnection)'
        repository: '$(imageRepository)'
        command: buildAndPush
        dockerfile: '$(Build.SourcesDirectory)/Dockerfile'
        tags: |
          $(tag)
          latest

# Stage 2: Package & Push Helm Chart to ACR
- stage: Package
  displayName: 'Package Helm Chart'
  jobs:
  - job: PackageHelmChart
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      submodules: true
      fetchDepth: 0
      persistCredentials: true
  
    - task: HelmInstaller@1
      inputs:
        helmVersionToInstall: 'latest'
    - task: AzureCLI@2
      displayName: 'Push Helm Chart to ACR as OCI artifact'
      inputs:
        azureSubscription: '$(azureRmServiceConnection)'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          az acr login --name $(azureContainerRegistry)
          helm package $(Build.SourcesDirectory)/Helm \
            --version $(Build.BuildId) \
            --destination $(Build.ArtifactStagingDirectory)
          export HELM_EXPERIMENTAL_OCI=1
          CHART_PATH=$(Build.ArtifactStagingDirectory)/bestrong-$(Build.BuildId).tgz
          helm push $CHART_PATH oci://$(azureContainerRegistry).azurecr.io/helm

                
- stage: Deploy
  displayName: 'Deploy to AKS'
  dependsOn:
    - Build
    - Package
  jobs:
  - deployment: DeployToAKS
    pool:
      vmImage: 'ubuntu-latest'
    environment: 'production'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: HelmInstaller@1
            inputs:
              helmVersionToInstall: 'latest'
          - task: AzureCLI@2
            displayName: 'Get AKS Credentials and Deploy'
            inputs:
              azureSubscription: '$(azureRmServiceConnection)'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                az aks get-credentials -n aks-bestrong -g $(azureResourceGroup)

                echo "Installing ingress-nginx with LoadBalancer..."
                helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
                helm repo update
                helm upgrade --install ingress-nginx ingress-nginx/ingress-nginx \
                  --namespace ingress-nginx \
                  --create-namespace \
                  --set controller.service.type=LoadBalancer

                echo "Installing cert-manager..."
                helm repo add jetstack https://charts.jetstack.io
                helm repo update
                helm upgrade --install cert-manager jetstack/cert-manager \
                  --namespace cert-manager \
                  --create-namespace \
                  --set installCRDs=true

                echo "Applying Self-Signed ClusterIssuer..."
                kubectl apply -f $(Build.SourcesDirectory)/Helm/config/letsencrypt-clusterissuer.yaml


                export HELM_EXPERIMENTAL_OCI=1
                az acr login --name $(azureContainerRegistry)

                helm pull oci://$(azureContainerRegistry).azurecr.io/helm/bestrong-api:$(tag) --destination $(Agent.TempDirectory)

                helm upgrade --install bestrong-api $(Agent.TempDirectory)/bestrong-api-$(tag).tgz \
                  --set image.repository=$(azureContainerRegistry).azurecr.io/$(imageRepository) \
                  --set image.tag=$(tag) \
                  --set replicaCount=2 \
                  --set ingress.enabled=true \
                  --set ingress.host=kjk-s.xyz \          
                  --set ingress.tls[0].hosts[0]=kjk-s.xyz \
                  --set ingress.tls[0].secretName=letsencrypt-prod-tls \
                  --set tls.issuer=letsencrypt-prod \
                  --namespace default
         