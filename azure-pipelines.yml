variables:
  azureContainerRegistry: 'bestrong'
  azureResourceGroup: 'rg-bestrong'
  imageRepository: 'bestrong-api'
  tag: '$(Build.BuildId)'
  dockerRegistryServiceConnection: 'bestrong-acr'
  azureRmServiceConnection: 'azure-conn'

trigger:
  branches:
    include:
      - main 

stages:
# Stage 1: Build & Push Docker Image to ACR
- stage: Build
  jobs:
  - job: BuildAndPush
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      submodules: true
      fetchDepth: 0
      persistCredentials: true
    - task: Docker@2
      displayName: 'Login to ACR'
      inputs:
        command: login
        containerRegistry: '$(dockerRegistryServiceConnection)'
    - task: Docker@2
      displayName: 'Build and Push Docker Image'
      inputs:
        containerRegistry: '$(dockerRegistryServiceConnection)'
        repository: '$(imageRepository)'
        command: buildAndPush
        dockerfile: '$(Build.SourcesDirectory)/Dockerfile'
        tags: |
          $(tag)
          latest

# Stage 2: Package & Push Helm Chart to ACR
- stage: Package
  displayName: 'Package Helm Chart'
  jobs:
  - job: PackageHelmChart
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      submodules: true
      fetchDepth: 0
      persistCredentials: true
  
    - task: HelmInstaller@1
      inputs:
        helmVersionToInstall: 'latest'
    - task: AzureCLI@2
      displayName: 'Push Helm Chart to ACR as OCI artifact'
      inputs:
        azureSubscription: '$(azureRmServiceConnection)'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          az acr login --name $(azureContainerRegistry)
          helm package $(Build.SourcesDirectory)/Helm \
            --version $(Build.BuildId) \
            --destination $(Build.ArtifactStagingDirectory)
          export HELM_EXPERIMENTAL_OCI=1
          CHART_PATH=$(Build.ArtifactStagingDirectory)/bestrong-api-$(Build.BuildId).tgz
          helm push $CHART_PATH oci://$(azureContainerRegistry).azurecr.io/helm

- stage: Deploy
  displayName: 'Deploy to AKS'
  dependsOn:
    - Build
    - Package
  jobs:
  - deployment: DeployToAKS
    pool:
      vmImage: 'ubuntu-latest'
    environment: 'production'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: HelmInstaller@1
            inputs:
              helmVersionToInstall: 'latest'

          - task: AzureCLI@2
          displayName: 'Get AKS Credentials and Deploy'
          inputs:
            azureSubscription: '$(azureRmServiceConnection)'
            scriptType: 'bash'
            scriptLocation: 'inlineScript'
            inlineScript: |
              az aks get-credentials -n aks-bestrong -g $(azureResourceGroup)

              echo "Installing ingress-nginx with LoadBalancer..."
              helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
              helm repo update
              helm upgrade --install ingress-nginx ingress-nginx/ingress-nginx \
                --namespace ingress-nginx \
                --create-namespace \
                --set controller.service.type=LoadBalancer \
                --set controller.progressDeadlineSeconds=600

              echo "Waiting for ingress-nginx controller to be ready..."
              kubectl wait --namespace ingress-nginx \
                --for=condition=Ready pod \
                --selector=app.kubernetes.io/component=controller \
                --timeout=300s
              # ... rest of the script remains unchanged

                echo "Waiting for ingress-nginx admission webhook to be ready..."
                kubectl wait --namespace ingress-nginx \
                  --for=condition=Available deployment \
                  --selector=app.kubernetes.io/component=controller \
                  --timeout=300s

                # Additional wait to ensure webhook service endpoints are ready
                echo "Verifying admission webhook service has endpoints..."
                for i in {1..30}; do
                  ENDPOINTS=$(kubectl get endpoints -n ingress-nginx ingress-nginx-controller-admission -o jsonpath='{.subsets[*].addresses[*].ip}' 2>/dev/null || echo "")
                  if [ ! -z "$ENDPOINTS" ]; then
                    echo "Admission webhook endpoints are ready: $ENDPOINTS"
                    break
                  fi
                  echo "Waiting for admission webhook endpoints... attempt $i/30"
                  sleep 10
                done

                # Verify the webhook is actually responding
                echo "Testing admission webhook connectivity..."
                kubectl get validatingwebhookconfigurations.admissionregistration.k8s.io ingress-nginx-admission

                echo "Installing cert-manager..."
                helm repo add jetstack https://charts.jetstack.io
                helm repo update
                helm upgrade --install cert-manager jetstack/cert-manager \
                  --namespace cert-manager \
                  --create-namespace \
                  --set crds.enabled=true

                echo "Waiting for cert-manager to be ready..."
                kubectl wait --namespace cert-manager \
                  --for=condition=Ready pod \
                  --selector=app.kubernetes.io/name=cert-manager \
                  --timeout=180s

                echo "Applying letsencrypt-prod ClusterIssuer directly..."
                kubectl apply -f - <<EOF
                apiVersion: cert-manager.io/v1
                kind: ClusterIssuer
                metadata:
                  name: letsencrypt-prod
                spec:
                  acme:
                    server: https://acme-v02.api.letsencrypt.org/directory
                    email: vasylbalakym@gmail.com
                    privateKeySecretRef:
                      name: letsencrypt-prod
                    solvers:
                      - http01:
                          ingress:
                            class: nginx
                EOF

                echo "Logging in to ACR..."
                export HELM_EXPERIMENTAL_OCI=1
                az acr login --name $(azureContainerRegistry)

                echo "Pulling Helm chart from ACR..."
                helm pull oci://$(azureContainerRegistry).azurecr.io/helm/bestrong-api:$(tag) --destination $(Agent.TempDirectory)

                echo "Deploying BeStrong API with Helm..."
                helm upgrade --install bestrong-api $(Agent.TempDirectory)/bestrong-api-$(tag).tgz \
                  --set image.repository=$(azureContainerRegistry).azurecr.io/$(imageRepository) \
                  --set image.tag=$(tag) \
                  --set replicaCount=2 \
                  --set ingress.enabled=true \
                  --set ingress.host=kjk-s.xyz \
                  --set ingress.tls[0].hosts[0]=kjk-s.xyz \
                  --set ingress.tls[0].secretName=letsencrypt-prod-tls \
                  --set tls.issuer=letsencrypt-prod \
                  --namespace default